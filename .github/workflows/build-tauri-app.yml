name: Build
on: push

jobs:
  build:
    strategy:
      fail-fast: false

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 12
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Use yarn cache
      uses: actions/cache@v1
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install app dependencies
      run: yarn --prefer-offline
    - name: Run linter
      run: yarn lint
    - name: Run frontend build
      run: yarn build

  bundle-amd64:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 12
    - name: Install Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Install webkit2gtk (Ubuntu only)
      if: matrix.platform == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y webkit2gtk-4.0
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Use yarn cache
      uses: actions/cache@v1
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install app dependencies
      run: yarn --prefer-offline
    - name: Run the release build
      run: |
        echo "Print tauri info"
        yarn tauri info
        echo "Build"
        yarn tauri build
    - name: Upload the build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: latreutes-bundle-amd64-${{ matrix.platform }}
        path: |
          src-tauri/target/release/bundle/*
          !src-tauri/target/release/bundle/appimage/latreutes.AppDir/
          src-tauri/target/release/latreutes*

  # Currently cargo fetch in armv7 is broken due to the issue described in the following links:
  # https://github.com/docker/buildx/issues/395
  # https://github.com/rust-lang/cargo/issues/8719
  # https://users.rust-lang.org/t/rust-docker-image-broken-on-architecture-linux-arm-v7/54868/2
  # And the aarch64 build seems to temporarily be broken cargo can't find tauri-cli in the crates.io registry
  # bundle-arm:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - arch: aarch64
  #           distro: ubuntu20.04
  #         - arch: armv7
  #           distro: ubuntu20.04

  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Run the release build
  #     uses: uraimo/run-on-arch-action@v2.1.1
  #     with:
  #       arch: ${{ matrix.arch }}
  #       distro: ${{ matrix.distro }}
  #       githubToken: ${{ github.token }}
  #       dockerRunArgs: |
  #         -v "${{ github.workspace }}:${{ github.workspace }}"
  #       env: |
  #         artifact_name: latreutes-${{ matrix.distro }}_${{ matrix.arch }}
  #       shell: /bin/bash
  #       install: |
  #         echo "Update system"
  #         apt-get update
  #         echo "Install dependencies"
  #         apt-get install -y webkit2gtk-4.0 libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libappindicator3-dev patchelf librsvg2-dev
  #         echo "Install NVM"
  #         curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
  #         export NVM_DIR="$HOME/.nvm"
  #         [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  #         echo "Install Node.js"
  #         nvm install node --latest-npm
  #         nvm use node
  #         echo "Install Yarn"
  #         npm install --global yarn
  #         echo "Install Rust"
  #         curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  #         source "${HOME}/.cargo/env"
  #         rustup self update
  #         rustup update
  #         rustc --version
  #       run: |
  #         cd ${{ github.workspace }}
  #         source "${HOME}/.cargo/env"
  #         export NVM_DIR="$HOME/.nvm"
  #         [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  #         nvm use node
  #         echo "Install app dependencies"
  #         # Make optipng build on arm64, refer to https://github.com/WebThingsIO/gateway-deb/issues/2
  #         # and https://github.com/imagemin/optipng-bin/issues/97
  #         export CPPFLAGS="-DPNG_ARM_NEON_OPT=0"
  #         yarn
  #         echo "Troubleshoot"
  #         ls "${HOME}/.cargo/bin"
  #         cargo install tauri-cli
  #         which cargo-tauri
  #         cargo-tauri --version
  #         cargo-tauri info
  #         yarn tauri build --version
  #         echo "Run bundle build"
  #         yarn tauri build --debug
  #   - name: Upload the build artifacts
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: bundle-${{ matrix.arch }}-${{ matrix.distro }}
  #       path: |
  #         src-tauri/target/release/bundle/*
  #         !src-tauri/target/release/bundle/appimage/latreutes.AppDir/
  #         src-tauri/target/release/latreutes*
